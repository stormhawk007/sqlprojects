<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/devtripathi/OneDrive/Desktop/Py-DS-ML-Bootcamp-master/GL/SQL/Project/New Orders.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1901"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,7:mainADDRESS"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="ADDRESS" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="90"/><column index="2" value="300"/><column index="3" value="261"/><column index="4" value="111"/><column index="5" value="98"/><column index="6" value="62"/><column index="7" value="66"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="ONLINE_CUSTOMER" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="97"/><column index="2" value="125"/><column index="3" value="126"/><column index="4" value="176"/><column index="5" value="124"/><column index="6" value="90"/><column index="7" value="187"/><column index="8" value="151"/><column index="9" value="131"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="ORDER_HEADER" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="73"/><column index="2" value="97"/><column index="3" value="92"/><column index="4" value="107"/><column index="5" value="112"/><column index="6" value="109"/><column index="7" value="163"/><column index="8" value="84"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="ORDER_ITEMS" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="73"/><column index="2" value="88"/><column index="3" value="137"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="PRODUCT" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="88"/><column index="2" value="300"/><column index="3" value="156"/><column index="4" value="111"/><column index="5" value="186"/><column index="6" value="40"/><column index="7" value="51"/><column index="8" value="53"/><column index="9" value="57"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="PRODUCT_CLASS" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="156"/><column index="2" value="155"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="SHIPPER" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="84"/><column index="2" value="106"/><column index="3" value="111"/><column index="4" value="130"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">--1.) Write a query to Display the product details (product_class_code, product_id, product_desc, product_price,) 
--as per the following criteria and sort them in descending order of category: 
--			a. If the category is 2050, increase the price by 2000 
--			b. If the category is 2051, increase the price by 500 
--			c. If the category is 2052, increase the price by 600.
-- Sol:

SELECT PRODUCT_CLASS_CODE, PRODUCT_ID, PRODUCT_DESC,
CASE PRODUCT_CLASS_CODE WHEN 2050 THEN PRODUCT_PRICE+2000
						WHEN 2051 THEN PRODUCT_PRICE+500
						WHEN 2052 THEN PRODUCT_PRICE+600
						ELSE PRODUCT_PRICE END AS PRODUCT_PRICE
FROM PRODUCT
ORDER BY PRODUCT_CLASS_CODE DESC;
--------------------------------------------------------------------------------------------------------------------------------------------------------
--2.) Write a query to display (product_class_desc, product_id, product_desc, product_quantity_avail ) and 
-- Show inventory status of products as below as per their available quantity: 
-- 		a. For Electronics and Computer categories, if available quantity is &lt;= 10, show 'Low stock', 11 &lt;= qty &lt;= 30, show 'In stock', &gt;= 31, show 'Enough stock' 
-- 		b. For Stationery and Clothes categories, if qty &lt;= 20, show 'Low stock', 21 &lt;= qty &lt;= 80, show 'In stock', &gt;= 81, show 'Enough stock' 
--		c. Rest of the categories, if qty &lt;= 15 – 'Low Stock', 16 &lt;= qty &lt;= 50 – 'In Stock', &gt;= 51 – 'Enough stock' For all categories, if available quantity is 0, show 'Out of stock'. 
-- Sol:

SELECT PRODUCT_CLASS_DESC,PRODUCT_ID,PRODUCT_DESC,PRODUCT_QUANTITY_AVAIL,
CASE 
	WHEN PRODUCT_QUANTITY_AVAIL =0
	THEN &quot;Out of stock&quot;
	WHEN PRODUCT_CLASS_DESC IN (&quot;Electronics&quot;,&quot;Computer&quot;)
	THEN 
		CASE 
			WHEN PRODUCT_QUANTITY_AVAIL &lt;11 
			THEN &quot;Low stock&quot;
			WHEN PRODUCT_QUANTITY_AVAIL  BETWEEN 11 AND 30 
			THEN &quot;In stock&quot;
			WHEN PRODUCT_QUANTITY_AVAIL &gt;=31
			THEN &quot;Enough stock&quot;
		END
	WHEN PRODUCT_CLASS_DESC IN (&quot;Stationery&quot;,&quot;Clothes&quot;)
	THEN
		CASE 
			WHEN PRODUCT_QUANTITY_AVAIL &lt;21 
			THEN &quot;Low stock&quot;
			WHEN PRODUCT_QUANTITY_AVAIL  BETWEEN 21 AND 80 
			THEN &quot;In stock&quot;
			WHEN PRODUCT_QUANTITY_AVAIL &gt;=81
			THEN &quot;Enough stock&quot;
		END
	ELSE
		CASE 
			WHEN PRODUCT_QUANTITY_AVAIL &lt;16
			THEN &quot;Low stock&quot;
			WHEN PRODUCT_QUANTITY_AVAIL  BETWEEN 16 AND 50
			THEN &quot;In stock&quot;
			WHEN PRODUCT_QUANTITY_AVAIL &gt;=51
			THEN &quot;Enough stock&quot;
		END
	END AS INVENTORY_STATUS
FROM PRODUCT JOIN PRODUCT_CLASS
ON PRODUCT.PRODUCT_CLASS_CODE = PRODUCT_CLASS.PRODUCT_CLASS_CODE
ORDER BY PRODUCT_CLASS_DESC;
---------------------------------------------------------------------------------------------------------------------------------------
--3.) Write a query to show the number of cities in all countries other than USA &amp; MALAYSIA,
-- with more than 1 city, in the descending order of CITIES. 
--Sol:
SELECT COUNTRY,COUNT(CITY) AS CITIES 
FROM ADDRESS
WHERE COUNTRY NOT IN (&quot;USA&quot;,&quot;Malaysia&quot;)
GROUP BY COUNTRY
HAVING COUNT(CITY)&gt;1;
---------------------------------------------------------------------------------------------------------------------------------------
-- 4. write a query to display the customer_id,customer full name ,city,pincode,and order details 
-- (order id, product class desc, product desc, subtotal(product_quantity * product_price)) 
-- for orders shipped to cities whose pin codes do not have any 0s in them. 
-- sort the output on customer name and subtotal. (52 rows)
-- [note: table to be used - online_customer, address, order_header, order_items, product, product_class]
-- Sol:

SELECT CUSTOMER_ID,CUSTOMER_FULL_NAME,CITY,PINCODE,ORDER_ID,PRODUCT_CLASS_DESC,PRODUCT_DESC,(PRODUCT_PRICE*PRODUCT_QUANTITY_AVAIL) AS SUBTOTAL
FROM 
	(SELECT CUSTOMER_ID,CUSTOMER_FULL_NAME,CITY,PINCODE,ORDER_ID,PRODUCT_PRICE,PRODUCT_QUANTITY_AVAIL,PRODUCT_CLASS_CODE,PRODUCT_DESC
	FROM
		(SELECT CUSTOMER_ID,CUSTOMER_FULL_NAME,CITY,PINCODE,CUSTOMER_ORDER.ORDER_ID,PRODUCT_ID
		FROM
			(SELECT CUSTOMER_INFO.CUSTOMER_ID,CUSTOMER_FULL_NAME, CITY, PINCODE,ORDER_HEADER1.ORDER_ID
			FROM 
				(SELECT *,CUSTOMER_FNAME||' ' || CUSTOMER_LNAME AS CUSTOMER_FULL_NAME
				 FROM ONLINE_CUSTOMER JOIN ADDRESS ON ONLINE_CUSTOMER.ADDRESS_ID = ADDRESS.ADDRESS_ID) 
				 
			AS CUSTOMER_INFO			 
			JOIN (SELECT * FROM ORDER_HEADER WHERE ORDER_HEADER.ORDER_STATUS = &quot;Shipped&quot;) AS ORDER_HEADER1
			ON CUSTOMER_INFO.CUSTOMER_ID= ORDER_HEADER1.CUSTOMER_ID)
			
		AS CUSTOMER_ORDER
		JOIN ORDER_ITEMS
		ON CUSTOMER_ORDER.ORDER_ID=ORDER_ITEMS.ORDER_ID)
		
	AS CUSTOMER_PRODUCT
	JOIN PRODUCT
	ON CUSTOMER_PRODUCT.PRODUCT_ID=PRODUCT.PRODUCT_ID)
AS FINAL
JOIN PRODUCT_CLASS
ON PRODUCT_CLASS.PRODUCT_CLASS_CODE = FINAL.PRODUCT_CLASS_CODE
WHERE PINCODE NOT LIKE &quot;%0%&quot;
ORDER BY CUSTOMER_FULL_NAME,SUBTOTAL;
---------------------------------------------------------------------------------------------------------------------------------------
--5. Write a Query to display product id,product description,totalquantity(sum(product quantity) 
-- for a given item whose product id is 201 and which item has been bought along with it maximum no. of times.
-- Display only one record which has the maximum value for total quantity in this scenario.
-- (USE SUB-QUERY)(1 ROW)[NOTE : ORDER_ITEMS TABLE,PRODUCT TABLE]
-- Sol:


SELECT PRODUCT.PRODUCT_ID,PRODUCT_DESC,SUM(PRODUCT_QUANTITY) AS TOTAL_QUANTITY 
FROM
	(SELECT PROD_201.ORDER_ID,ORDER_ITEMS.PRODUCT_ID,ORDER_ITEMS.PRODUCT_QUANTITY 
	 FROM ORDER_ITEMS 
	 JOIN (SELECT * FROM ORDER_ITEMS
		   WHERE PRODUCT_ID=201)
		  
	AS PROD_201
	ON ORDER_ITEMS.ORDER_ID=PROD_201.ORDER_ID
	WHERE ORDER_ITEMS.PRODUCT_ID !=201)
	
AS PRODUCTS_WITH201
JOIN PRODUCT
ON PRODUCT.PRODUCT_ID = PRODUCTS_WITH201.PRODUCT_ID
GROUP BY ORDER_ID
ORDER BY TOTAL_QUANTITY DESC
LIMIT 1;
-----------------------------------------------------------------------------------------------------------------------------------------
--6. Write a query to display the customer_id,customer name, email and order details
-- (order id, product desc,product qty, subtotal(product_quantity * product_price)) 
-- for all customers even if they have not ordered any item.(225 ROWS) 
-- [NOTE: TABLE TO BE USED - online_customer, order_header, order_items, product]
--Sol:
SELECT CUSTOMER_ID,CUSTOMER_FULL_NAME,CUSTOMER_EMAIL,ALL_CUSTOMER.ORDER_ID,PRODUCT_DESC,PRODUCT_QUANTITY,SUBTOTAL 
FROM 
	(SELECT ONLINE_CUSTOMER.CUSTOMER_ID, CUSTOMER_FNAME||' '||CUSTOMER_LNAME AS CUSTOMER_FULL_NAME, CUSTOMER_EMAIL,ORDER_ID
	FROM ONLINE_CUSTOMER LEFT JOIN ORDER_HEADER
	ON ONLINE_CUSTOMER.CUSTOMER_ID = ORDER_HEADER.CUSTOMER_ID) AS ALL_CUSTOMER

LEFT JOIN
	(SELECT ORDER_ID,PRODUCT_DESC,PRODUCT_QUANTITY,(PRODUCT_QUANTITY*PRODUCT_PRICE) AS SUBTOTAL 
	FROM ORDER_ITEMS JOIN PRODUCT 
	ON ORDER_ITEMS.PRODUCT_ID = PRODUCT.PRODUCT_ID) AS ORD_PROD
	
ON ALL_CUSTOMER.ORDER_ID=ORD_PROD.ORDER_ID;</sql><current_tab id="0"/></tab_sql></sqlb_project>
